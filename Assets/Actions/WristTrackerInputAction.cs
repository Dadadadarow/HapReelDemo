//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Actions/WristTrackerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WristTrackerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WristTrackerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WristTrackerInputAction"",
    ""maps"": [
        {
            ""name"": ""WristTracker"",
            ""id"": ""cc3699f9-e16d-4884-83b8-b6f1000b4a3b"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""57c3727e-272a-409d-9a00-d06b80550d88"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""339fb4a2-f3d3-40ff-aabb-89b02e65483f"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Velocity"",
                    ""type"": ""Value"",
                    ""id"": ""d787a757-2b93-433c-a9d7-a9e7628a758b"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9bf43eed-9b8f-4371-839c-d05224b6f8c9"",
                    ""path"": ""<XRViveTracker>{Waist}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a50fe585-bc01-420b-ae7b-9afe05e67dff"",
                    ""path"": ""<XRViveTracker>{Waist}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""678cc30a-461e-4459-af0d-d20cf0122b58"",
                    ""path"": ""<XRViveTracker>{Waist}/devicePose/velocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WristTracker
        m_WristTracker = asset.FindActionMap("WristTracker", throwIfNotFound: true);
        m_WristTracker_Position = m_WristTracker.FindAction("Position", throwIfNotFound: true);
        m_WristTracker_Rotation = m_WristTracker.FindAction("Rotation", throwIfNotFound: true);
        m_WristTracker_Velocity = m_WristTracker.FindAction("Velocity", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WristTracker
    private readonly InputActionMap m_WristTracker;
    private List<IWristTrackerActions> m_WristTrackerActionsCallbackInterfaces = new List<IWristTrackerActions>();
    private readonly InputAction m_WristTracker_Position;
    private readonly InputAction m_WristTracker_Rotation;
    private readonly InputAction m_WristTracker_Velocity;
    public struct WristTrackerActions
    {
        private @WristTrackerInputAction m_Wrapper;
        public WristTrackerActions(@WristTrackerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_WristTracker_Position;
        public InputAction @Rotation => m_Wrapper.m_WristTracker_Rotation;
        public InputAction @Velocity => m_Wrapper.m_WristTracker_Velocity;
        public InputActionMap Get() { return m_Wrapper.m_WristTracker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WristTrackerActions set) { return set.Get(); }
        public void AddCallbacks(IWristTrackerActions instance)
        {
            if (instance == null || m_Wrapper.m_WristTrackerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WristTrackerActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Velocity.started += instance.OnVelocity;
            @Velocity.performed += instance.OnVelocity;
            @Velocity.canceled += instance.OnVelocity;
        }

        private void UnregisterCallbacks(IWristTrackerActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Velocity.started -= instance.OnVelocity;
            @Velocity.performed -= instance.OnVelocity;
            @Velocity.canceled -= instance.OnVelocity;
        }

        public void RemoveCallbacks(IWristTrackerActions instance)
        {
            if (m_Wrapper.m_WristTrackerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWristTrackerActions instance)
        {
            foreach (var item in m_Wrapper.m_WristTrackerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WristTrackerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WristTrackerActions @WristTracker => new WristTrackerActions(this);
    public interface IWristTrackerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnVelocity(InputAction.CallbackContext context);
    }
}
